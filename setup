#!/bin/bash

# Only proceed if Xcode Command Line Tools is installed.
xcode-select -p &>/dev/null
if [ $? -ne 0 ]; then
  printf "Please install Xcode Command Line Tools first:\nxcode-select --install\n"
  exit 1
fi

# Define variables.
mac_setup="$HOME/.mac-setup" # Installation directory.
github_username="caiwilliamson"

# Clone mac-setup if it doesn't already exist.
if [ ! -d $mac_setup ]; then
  mkdir $mac_setup
  git clone https://github.com/$github_username/mac-setup.git $mac_setup
fi

cd $mac_setup

# Include utilities.
. utilities

print_multiline "$(start_notice)"

read -e -p "Enter 'yes' to continue: " choice
[ "$choice" == "yes" ] || exit 1


############
# Dotfiles #
############

print_heading "Dotfiles"

# Symlink dotfiles.
for dotfile in $mac_setup/dotfiles/*; do
  create_symlink $dotfile $HOME/.$(basename $dotfile)
done


############
# Homebrew #
############

print_heading "Homebrew"

# Install Homebrew.
if [ ! $(command -v brew) ]; then
  printf "\n" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #        └─ Simulate ENTER keypress.

  # Exit if installation fails.
  [ $? -ne 0 ] && print_error "Homebrew" && exit 1
fi
print_success "Homebrew"


########
# Fish #
########

print_heading "Fish"
brew_install "Fish" "fish"

# Add Fish path to '/etc/shells'.
if [ ! $(grep "/usr/local/bin/fish" /etc/shells) ]; then
  sudo sh -c "printf '/usr/local/bin/fish\n' >> /etc/shells"
fi
print_result $? "Fish: Add '/usr/local/bin/fish' to '/etc/shells'"

# Change login shell to Fish.
if [ $SHELL != /usr/local/bin/fish ]; then
  sudo chsh -s /usr/local/bin/fish $USER
fi
print_result $? "Fish: Change login shell to '/usr/local/bin/fish'"

# Check that '/usr/local/bin/fish' is being used.
[ "$(which fish)" == "/usr/local/bin/fish" ]
print_result $? "Fish: Using /usr/local/bin/fish"


########
# asdf #
########

print_heading "asdf"
brew_install "asdf" "asdf"


########
# Ruby #
########

print_heading "Ruby"

# https://github.com/asdf-vm/asdf-ruby#install
# https://github.com/rbenv/ruby-build/wiki#suggested-build-environment
brew_install "Ruby Dependencies" "openssl@1.1 readline"

asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git
print_result $? "Install asdf-ruby plugin"

asdf install ruby latest
print_result $? "Install Ruby"

asdf global ruby latest
print_result $? "Set global Ruby"


###########
# Node.js #
###########

print_heading "Node.js"

asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
print_result $? "Install asdf-nodejs plugin"

asdf install nodejs latest
print_result $? "Install Node.js"

asdf global nodejs latest
print_result $? "Set global Node.js"


#######
# Git #
#######

print_heading "Git"
brew_install "Git" "git"

# Check that '/usr/local/bin/git' is being used.
[ "$(which git)" == "/usr/local/bin/git" ]
print_result $? "Git: Using /usr/local/bin/git"


###################
# GitHub SSH Keys #
###################

print_heading "GitHub SSH Keys"

ssh_key="$HOME/.ssh/github"

# Set up new keys if either key (public or private) is missing.
if [ ! -e $ssh_key ] || [ ! -e $ssh_key.pub ]; then
  # Generate a new key pair.
  key_name="$(hostname)_$(date '+%Y-%m-%d_%H:%M:%S')"
  ssh-keygen -t rsa -b 4096 -C "$key_name" -f "$ssh_key"
  print_result $? "GitHub SSH Keys: Generate a new key pair"

  # Create an SSH config file.
  if [ ! -e $HOME/.ssh/config ]; then
    touch $HOME/.ssh/config
  fi

  cat <<EOF > $HOME/.ssh/config
Host *
  AddKeysToAgent yes
  UseKeychain yes

Host github.com
    User git
    HostName github.com
    IdentityFile $ssh_key

Host gist.github.com
    User gist
    HostName github.com
    IdentityFile $ssh_key
EOF
  print_result $? "GitHub SSH Keys: Create an SSH config file: '$HOME/.ssh/config'"

  # Purge all identities from the ssh-agent. Identities will be added
  # automatically by the SHH config when needed.
  ssh-add -D &>/dev/null

  # Add the public key to GitHub. 3 attempts so we don't spam the API
  # and get locked out.
  public_key="$(cat $ssh_key.pub)"
  for run in {1..3}
  do
    key_uploaded="$(curl -f -s \
                    -u "$github_username" \
                    --data "{\"title\":\"$key_name\",\"key\":\"$public_key\"}" \
                    https://api.github.com/user/keys \
                  )"

    if [ -n "$key_uploaded" ]; then
      print_success "GitHub SSH Keys: Add the public key to GitHub"
      break # Success. Exit loop.
    fi
  done

  if [ -z "$key_uploaded" ]; then
    # Failed all 3 attempts to add the public key to GitHub.
    print_error "GitHub SSH Keys: Add the public key to GitHub"
    # Remove keys.
    rm $ssh_key $ssh_key.pub
    # Purge all identities from the ssh-agent.
    ssh-add -D &>/dev/null

    print_notification "Cleaning up..."
    print_notification "Removed '$ssh_key' and '$ssh_key.pub'"
    print_notification "Removed all identities from ssh-agent."

    # Exit.
    exit 1
  fi
else
  print_success "GitHub SSH Keys: Existing key pair found"
fi

# Authenticate with GitHub.
ssh -T git@github.com &>/dev/null
# Exit if authentication fails.
[ $? -ne 1 ] && print_error "GitHub SSH Keys: Authenticate with GitHub" && exit 1
print_success "GitHub SSH Keys: Authenticate with GitHub"

# Make mac-setup use the SSH remote url now that SSH is set up.
git remote set-url origin git@github.com:$github_username/mac-setup.git


#########
# Rails #
#########

print_heading "Rails"

# Install Rails.
if [ $(gem list '^rails$' -i) == "false" ]; then
  gem install rails

  # Exit if installation fails.
  [ $? -ne 0 ] && print_error "Rails" && exit 1
fi
print_success "Rails"


##############
# PostgreSQL #
##############

print_heading "PostgreSQL"
brew_install "PostgreSQL" "postgresql"

if [ $(command -v psql) ]; then
  # Start PostgresSQL.
  brew services restart postgresql
  print_result $? "PostgreSQL: Started"
  # Wait a bit to ensure PostgreSQL has started.
  sleep 1
  # Create a database for the current user.
  if ! psql -lqt | cut -d \| -f 1 | grep -qw "$USER"; then
    createdb
  fi
  print_result $? "PostgreSQL: Create database '$USER'"
fi


#########
# Redis #
#########

print_heading "Redis"
brew_install "Redis" "redis"

if [ $(command -v redis-cli) ]; then
  # Start Redis.
  brew services restart redis
  print_result $? "Redis: Started"
fi


#######
# Vim #
#######

print_heading "Vim"
brew_install "Vim" "vim"


#########################
# Sublime Text Settings #
#########################

print_heading "Sublime Text Settings"

# Symlink 'subl' executable.
create_symlink /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl \
               /usr/local/bin/subl

# Symlink Sublime Text preferences.
for sublime_text_user_dir in $HOME/Library/Application\ Support/Sublime\ Text*/Packages/User; do
  create_symlink $mac_setup/app-settings/Preferences.sublime-settings \
                 "$sublime_text_user_dir"/Preferences.sublime-settings
done


##########################
# Sublime Merge Settings #
##########################

print_heading "Sublime Merge Settings"

create_symlink /Applications/Sublime\ Merge.app/Contents/SharedSupport/bin/smerge \
               /usr/local/bin/smerge


##################
# MacOS Settings #
##################

print_heading "MacOS Settings"

# Disable the annoying line marks in Terminal.
defaults write com.apple.Terminal ShowLineMarks -int 0
print_result $? "MacOS Settings: Disable the annoying line marks in Terminal"

# Stop requests to use new disks for Time Machine backups.
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
print_result $? "MacOS Settings: Stop requests to use new disks for Time Machine backups"


####################
# Terminal Profile #
####################

print_heading "Terminal Profile"

brew_install "Nerd Fonts - Hack" "font-hack-nerd-font" "homebrew/cask-fonts" "cask"

./set_terminal_profile.applescript
print_result $? "Terminal Profile: Set profile"


#################
# Finishing up! #
#################

print_heading "Finishing up!"

brew update
print_result $? "brew update"
brew upgrade
print_result $? "brew upgrade"

print_multiline "$(end_notice)"
